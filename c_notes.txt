The following is the discriptions of some of the libft project c functions used at We_Think_Code.

ft_memset.c: This function is used to fill a block of memory with a particular value.
			 Which means this function copies the character c (an unsigned char) to
			 the first n characters of the string pointed to, by the argument str.
			 This function is declared as:
			 void *ft_memset(void *str, int c, size_t n);
			 - str is a pointer to the block of memory to fill.
			 - c is the value to be set. The value is passed as an int, but the
			   function fills the block of memory using the unsigned char conversion
			   of this value.
			 - n is the number of bytes to be set to the value.
			 This function returns a pointer to the memory area str.

ft_bzero.c: This function write zeroes to a byte string.
			Which means this function places n zero-valued bytes in the area pointed
			to by s.
			This function is declared as: void ft_bzero(void *s, size_t n);
			- s is the string which has to be filled with null bytes.
			- n is the number of bytes to be filled with null values. 

ft_memcpy.c: This function copies n bytes from memory area src to memory area dst.
			 If dst and src overlap, behavior is undefined.
			 This function is declared as:
			 void *ft_memcpy(void *dst, const void *src, size_t n);
			 - dst is the pointer to the destination array where the content is to be
			   copied, type-casted to a pointer of type void*.
			 - src is the pointer to the source of data to be copied, type-casted to
			   a pointer of type void*.
			 - n is the number of bytes to be copied.
			 This function returns a pointer to destination, which is dst.

ft_memccpy.c: This function copies bytes from memory area src into memory area dst, stopping
              after the first occurrence of byte c (converted to an unsigned char) is copied,
			  or after n bytes are copied, whichever comes first.
			  This function is declared as:
			  void *ft_memccpy(void *dst, const void *src, int c, size_t n);
			  This function returns a pointer to the byte after the copy of c in dst or a NULL
			  pointer if c was not found in the first n bytes of src.

ft_memmove.c: This function copies len bytes from string src to string dst.
     		  The two strings may overlap.
			  This function is declared as:
			  void *ft_memmove(void *dst, const void *src, size_t len);
			  - dst is a pointer to the destination array where the content is to be copied,
			    type-casted to a pointer of type void*.
			  - src is a pointer to the source of data to be copied, type-casted to a pointer
			    type void*.
			  - len is the number of bytes to be copied.
			  This function returns a pointer to the destination, which is dst.

ft_memchr.c: This function searches for the first occurrence of the character c (an unsigned char)
			 in the first n bytes of the string pointed to, by the s.
			 This function is declared as:
			 void *ft_memchr(const void *s, int c, size_t n);
			 - s is the pointer to the block of memory where the search is performed.
			 - c is the value to be passed as an int, but the function performs a byte per byte
			   search using the unsigned char conversion of this value.
			 - n is the number of bytes to be analyzed.
			 This function returns a pointer to the matching byte or NULL if the character does
			 not occur in the given memory area.

ft_memcmp.c: This function compares the first n bytes of memory area s1 and memory area s2.
			 This function is declared as:
			 int ft_memcmp(const void *s1, const void *s2, size_t n);
			 - s1 is the pointer to a block of memory.
			 - s2 is the pointer to a block of memory.
			 - n is the number of bytes to be compared.
			 This function returns zero if the two strings are identical, otherwise returns the
			 difference between the first two differing bytes.

ft_strlen.c: This function evaluates the length of the string s up to, but not including the
			 terminating null character.
			 This function is declared as:
			 size_t ft_strlen(const char *s);
			 - s is the string whose length is to be found.
			 This function returns the length of string.

ft_strdup.c: This function duplicates the given string.
			 Which means this function allocates sufficient memory for a copy of the string s1.
			 This function is declared as:
			 char *ft_strdup(const char *s1);
			 - s1 is the pointer to the string to be duplicated.
			 This function returns the pointer to the duplicated string.

ft_strcpy.c: This function is copies the string pointed to by src to dst.
			 This function is declared as:
			 char *ft_strcpy(char *dst, const char *src);
			 - dst is the pointer to the destination array where the content is to be copied.
			 - src is the string to be copied.
			 This function returns a pointer to the destination, string dest.

ft_strncpy.c: This function copies up to len characters from the string pointed to by src to dst.
			  In a case where the length of src is less than that of len, the remainder of dst will
			  be filled with null bytes.
			  This function is declared as:
			  char *ft_strncpy(char *dst, const char *src, size_t len);
			  - dst is the pointer to the destination array where the content is to be copied.
			  - src is the string to be copied.
			  - n is the number of characters to be copied from source.
			  This function returns the final copy of the copied string.

ft_strcat.c: This function append a copy of the null-terminated string s2 to the end of the null-terminated
			 string s1, then add a terminating `\0'.
			 This function is declared as:
			 char *ft_strcat(char *s1, const char *s2);
			 - s1 is pointer to the destination array, which should contain a C string.
			 - s2 is the string to be appended.
			 The string s1 must have sufficient space to hold the result.
			 The source and destination strings should not overlap, as the behavior is undefined.
			 This function returns a pointer to the resulting string dest.

ft_strncat.c: This function appends not more than n characters from s2, and then adds a terminating `\0'.
			  This function is declared as:
			  char *ft_strncat(char *s1, const char *s2, size_t n);
			  - s1 is a pointer to the destination array, which should contain a C string.
			  - s2 is the string to be appended.
			  - n is the maximum number of characters to be appended.
			  The string s1 must have sufficient space to hold the result.
			  The source and destination strings should not overlap, as the behavior is undefined.
			  This function returns a pointer to the resulting string dest.

ft_strlcat.c: This function appends string src to the end of dst. It will append at most dstsize characters.
			  It will then NUL-terminate, unless dstsize is 0 or the original dst string was longer than
			  dstsize (in practice this should not happen as it means that either dstsize is incorrect
			  or that dst is not a proper string).
			  This function is declared as:
			  size_t ft_strlcat(char *dst, const char *src, size_t dstsize);
			  - dst is pointer to the destination array, which should contain a C string.
			  - src is the string to be appended.
			  - dstsize is the maximum number of characters to be appended.
			  This string return the total length of the string they tried to create.

ft_strchr.c: This function searches for the first occurrence of the character c (an unsigned char)
			 in the string pointed to by s.
			 This function is declared as:
			 char *ft_strchr(const char *s, int c);
			 - s is the string to be scanned.
			 - c is the character to be searched in s.
			 This function returns a pointer to the first occurrence of the character c in the string s,
			 or NULL if the character is not found.

ft_strrchr.c: This function searches for the last occurrence of the character c (an unsigned char)
			  in the string pointed to by s.
			  This function is declared as:
			  char *ft_strrchr(const char *s, int c);
			  - s is the C string to be scanned.
			  - c is the character to be located.
			  This function returns a pointer to the last occurrence of character c in string s,
			  or NULL if the charactor is not found.

ft_strstr.c: This function finds the first occurrence of the substring needle in the string haystack.
			 The terminating '\0' characters are not compared.
			 This function is declared as:
			 char *ft_strstr(const char *haystack, const char *needle);
			 - haystack is the main C string to be scanned.
			 - needle is the small string to be searched within haystack string.
			 If needle is an empty string, haystack is returned; if needle occurs nowhere in haystack,
			 NULL is returned; otherwise a pointer to the first character of the first occurrence of needle
			 is returned.

ft_strnstr.c: This function finds upto len characters of the first occurrence of the substring needle
			  in the string haystack.
			  The terminating '\0' characters are not compared.
			  This function is declared as:
			  char *ft_strnstr(const char *haystack, const char *needle, size_t len);
			  - haystack is the main C string to be scanned.
			  - needle is the small string to be searched with-in haystack string.
			  If needle is an empty string, haystack is returned; if needle occurs nowhere in haystack,
			  NULL is returned; otherwise a pointer to the first character of the first occurrence of needle
			  is returned.

ft_strcmp.c: This function compares the string pointed to by s1 to the string pointed to by s2.
			 This function is declared as:
			 int ft_strcmp(const char *s1, const char *s2);
			 - s1 is the first string to be compared.
			 - s2 is the second string to be compared.
			 This function return an integer greater than, equal to, or less than 0,
			 according as the string s1 is greater than, equal to, or less than the string s2.

ft_strncmp.c: This function compares at most the first n bytes of s1 and s2.
			  This function is declared as:
			  int ft_strncmp(const char *s1, const char *s2, size_t n);
			  - s1 is the first string to be compared.
			  - s2 is the second string to be compared.
			  - n is the maximum number of characters to be compared.
			  This function return an integer greater than, equal to, or less than 0,
			  according as the string s1 is greater than, equal to, or less than the string s2.

ft_atoi.c: This function converts the initial portion of the string pointed to by str to int representation.
		   This function is declared as:
		   int ft_atoi(const char *str);
		   - str is the string representation of an integral number.
		   This function returns the converted integral number as an int value.
		   If no valid conversion could be performed, it returns zero.

ft_isalpha.c: This function checks if the passed character is alphabetic.
			  This function is declared as:
			  int ft_isalpha(int c);
			  - c is the character to be checked.
			  This function returns non-zero value if c is an alphabet, else it returns 0.

ft_isdigit.c: This function checks if the passed character is a decimal digit character.
			  Decimal digits are (numbers) − 0 1 2 3 4 5 6 7 8 9.
			  This function is declared as:
			  int ft_isdigit(int c);
			  - c is the character to be checked.
			  This function returns non-zero value if c is a digit, else it returns 0.

ft_isalnum.c: This function checks if the passed character is alphanumeric.
			  Which means this function tests for any character for which ft_isalpha(3) or
			  ft_isdigit(3) is true.
			  - c is the character to be checked.
			  This function returns non-zero value if c is a digit or a letter, else it returns 0.

ft_isascii.c: This function function tests for an ASCII character.
			  This function is declared as:
			  int ft_isascii(int c);
			  - c is the character to be tested.
			  This function returns non-zero value if c is a ascii character, else it returns 0.

ft_isprint.c: This function checks whether the passed character is printable.
			  A printable character is a character that is not a control character.
			  This function declared as:
			  int ft_isprint(int c);
			  - c is the character to be checked.
			  The isprint() function returns zero if the character tests false
			  and returns non-zero if the character tests true.

ft_toupper.c: This function converts lowercase letter to uppercase.
			  This function is declared as:
			  int ft_toupper(int c);
			  - c is the letter to be converted to uppercase.
			  This function returns the corresponding uppercase letter if there is one;
			  otherwise, the argument is returned unchanged.

ft_tolower.c: This function converts a given letter to lowercase.
			  This function is declared as:
			  int ft_tolower(int c);
			  - c is the letter to be converted to lowercase.
			  This function returns the corresponding lowercase letter if there is one;
			  otherwise, the argument is returned unchanged.
